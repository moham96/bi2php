#summary Кратко о возможностях

= История =

Использовать RSA-криптографию в веб-приложениях довольно накладно. Но все же бывают случаи, когда это просто необходимо. В частности при регистрации нового пользователя при передаче пароля. Честный программист не станет пересылать по сети или хранить в базе данных пароли в открытом виде. Храниться как правило отпечаток (например md5).

Разумеется, зная отпечаток можно отправить его на сервер и тем самым дискредитировать защиту. Поэтому существует способ, когда к паролю присоединяется полученная с сервера уникальная для каждого запроса строка, и отпечаток вычисляется над конкатенацией пароля и полученной с сервера строки.

Если на сервере хранится не пароль а отпечаток, то что происходит на клиенте можно описать таким псевдокодом
 * md5( md5( password ) + chape )

Но все же, все же...

Один раз необходимо-таки переслать пароль или его отпечаток в открытом виде на сервер.

Вам может показаться надуманной проблема с паролями для несекьюрного сайта, где вход пользователя и вся система пролей городится чисто символически в виду маловажности информации.

Но, но ...

Как правило, пользователь зарегистрирован на сотне сайтов, из которых он половину не помнит даже адресов и использует всего несколько паролей. Если Вы хотите, чтобы Ваша база паролей была использована злоумышленниками для целей взлома логинов на сайтах с ответственной информацией, например электронной почты или даже платежей - пожалуйста, продолжайте принимать по сети или хранить пароли в открытом виде.

Все же когда я решил нарисовать сайт для графоманов - я, как человек ответственный, столкнулся с проблемой первой брачной ночи, то есть что в первый раз нужно переслать пароль ли, отпечаток ли, открыто. И тут мне понадобился RSA для того чтобы не делать это открыто.

= Известные реализации =

Для поддержки RSA на клиенте нужна соответствующая JavaScript-библиотека. Наиболее известна библиотека от dave@ohdave.com. Я начал работать с этой но не смог сразу соединить ее с серверной частью на PHP. Тогда пришел черед разбираться с кодом.

В результате код моей библиотеки во многом повторяет код от dave@ohdave.com. Спасибо ему за это. Например в качестве объекта BigInt используется:

  {
    digits: [[  ,  ,  ,  ,  ,  ]],
    isNeg: true | false
  }

Может быть не очень производительно но удобно.

Другая хорошая реализация Leemon Baird www.leemon.com хранит большие числа прямо в массиве

  [[  ,  ,  ,  ,  ,  ]]

Может быть когда-нибудь перейду на этот способ хранения

Практически весь код от dave@ohdave.com был переписан заново, в основном для исключения использования метода setMaxDigits() который сложен для восприятия и потенциально опасен. Все же одна функция работает так быстро как только может на JavaScript - это функция biMultiply(). Все мои попытки сделать то же самостоятельно снижали скорость поэтому код почти 1 : 1. Код функции biDivideodulo() от dave@ohdave.com был сильно переработан по двум причинам: 1) он давал неверный с точки зрения алгебры результат для отрицательных чисел и 2) от был слишком запутан. Мой код делает практически эквивалентный действия но 
более человекопонятно.

И все же я не хотел быть тупым копи-пастером и переписал модуль быстрого возведения в степень со взятие модуля по методу Montgomery. Тут меня ждала удача. Во-первых операция кодирования и декодирования ускорилась в 100 (сто!) раз по сравнению с dave@ohdave.com использовавшей метод BarretMu, при этом для больших ключей скорость была такой же как и для коротких, за исключением времени работы алгоритма Евклида при создании ключа и инвертировании чисел. Во-вторых такого изящного Монтгомери я ни у кого еще не встречал. Возможно речь идет о сильном упрощении метода Монтгомери в связи с операцией возведения в степень.

= Details =

Add your content here.  Format your content with:
  * Text in *bold* or _italic_
  * Headings, paragraphs, and lists
  * Automatic links to other wiki pages